require_relative 'util'

MAP = { UP => 1, DOWN => 2, LEFT => 3, RIGHT => 4 }

EMPTY = '_'
GOOD = '.'
WALL = '#'
OXYGEN = 'O'

SIZE = 50
ship = Grid.new(Array.new(SIZE) { EMPTY * SIZE }, SIZE / 2, SIZE / 2, nil)
ship.cur = GOOD

infun = -> do
  ship.dir = DIRECTIONS.sample
  ship.move
  MAP[ship.dir]
end

outfun = ->(val) do
  case val
  when 0
    ship.cur = WALL
    ship.reverse
  when 1
    ship.cur = GOOD
  when 2
    ship.cur = OXYGEN
  end
  ship.draw if (0..100).to_a.sample == 0
end

#intcode(first_line.split(',').map(&:to_i), infun, outfun)

grid =
  %w[
    __________________________________________________
    __________________________________________________
    __________________________________________________
    __________________________________________________
    _____#########_###########_#_#######_#####_#______
    ____#.........#...........#.#.......#.....#.#_____
    ____#.###.#####.#.#######.#.#.#####.#.#.#.#.#_____
    ____#...#.......#.....#.#.#...#...#...#.#.#.#_____
    _____##.#############.#.#.#####.#.#####.#.#.#_____
    ____#.............#...#.........#.......#.#.#_____
    ____#.#############.###.#################.#.#_____
    ____#...#.....#...#.#.....#...#.............#_____
    ____#.###.###.#.#.#.#####.#.#.#.############______
    ____#.#...#.#...#.#.#...#.#.#.#.#...........#_____
    ____#.#.###.#####.#.#.#.###.#.#.#.#########.#_____
    ____#.#.#.#.....#...#.#.....#.#.#...#.....#.#_____
    _____##.#.#.#.#####.#.#######.#.###.#.###.#.#_____
    ____#...#...#.......#.#.....#.#.#...#...#...#_____
    ____#.#.####_####.###.#.###.#.###.#####.####______
    ____#.#.#...#...#...#.#.#.#.#...#.....#.#...#_____
    ____#.#.#.#.#.#.###.#.#.#.#.###.#####.#.#.#.#_____
    ____#.#.#.#...#.#...#.#.#.#...#.#...#.#.#.#.#_____
    ____#.###.#####.#####.#.#.###.#.#.#.#.#.#.##______
    ____#.#...#...#...#...#.....#.#.#.#.#.#.#...#_____
    ____#.#.###.#.###.#.#########.#.#.#.#.#.#.#.#_____
    ____#.#...#.#...#.#.....#...#.....#.#.#.#.#.#_____
    ____#.###.###.#.#.#####.###.#######.#.#.###.#_____
    ____#...#.....#.#.....#...#...#...#.#.#.#...#_____
    ____#.#.###.#########.#.#.###.#.#.#.#.#.#.#.#_____
    ____#.#.....#.....#...#.#...#.#.#.#.#.#.#.#.#_____
    _____####.###.###.#.###.#####.#.###.#.#.#.#.#_____
    ____#...#.#...#.#.#.#...#.....#...#...#.#.#.#_____
    ____#.#.#.#.###.#.#.#.#.#.#######.#####.#.##______
    ____#.#.#.#.#...#...#.#.#...#.........#.#...#_____
    ____#.#.#.#.#.#.###.#.#####.#.#.###.###.###.#_____
    ____#.#.#.#.#.#...#.#.......#.#.#...#...#...#_____
    ____#.#.###.#.###.#.#########.#.#.###.###.#.#_____
    ____#.#...#.#.#...#.......#...#.#...#.....#.#_____
    ____#.###.#.#.###########.#.###.###########.#_____
    ____#.#.....#.........#...#...#.............#_____
    ____#.#########.#####.#.#####.##############______
    ____#.........#.....#.......#.#...#...#.....#_____
    ____#.#######.###############.#.#.#.#.#.###.#_____
    ____#.......#...................#...#...#O..#_____
    _____#######_###################_###_###_###______
    __________________________________________________
    __________________________________________________
    __________________________________________________
    __________________________________________________
    __________________________________________________
  ].map(&:chars)

ship = Grid.new(grid, SIZE / 2, SIZE / 2, nil)

exit_condition = ->((y, x)) { ship[y][x] == OXYGEN }

neighbors = ->((y, x)) do
  ship.teleport(y, x)
  ship.map_neighbors { ship.coords if ship.cur != WALL }
end

dijkstra(ship.coords, exit_condition, neighbors)

minutes = 0
loop do
  break if grid.none? { |r| r.include?(GOOD) }

  oxygen_cells = []
  grid.each.with_index do |r, y|
    r.each.with_index { |c, x| oxygen_cells << [y, x] if c == OXYGEN }
  end

  oxygen_cells.each do |y, x|
    ship.teleport(y, x)
    ship.map_neighbors { ship.cur = OXYGEN if ship.cur == GOOD }
  end

  minutes += 1
end

p minutes
