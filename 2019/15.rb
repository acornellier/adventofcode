require_relative 'util'

MAP = {
  UP => 1,
  DOWN => 2,
  LEFT => 3,
  RIGHT => 4,
}

EMPTY = '_'
GOOD = '.'
WALL = '#'
OXYGEN = 'O'

SIZE = 50
g = Grid.new(Array.new(SIZE) { EMPTY * SIZE}, SIZE / 2, SIZE / 2, nil)
g.cur = GOOD

infun = -> do
  g.dir = DIRECTIONS.sample
  g.move
  MAP[g.dir]
end

outfun = ->(val) do
  case val
  when 0
    g.cur = WALL
    g.reverse
  when 1
    g.cur = GOOD
  when 2
    g.cur = OXYGEN
  end
  g.draw if (0..100).to_a.sample == 0
end

#intcode(first_line.split(',').map(&:to_i), infun, outfun)

grid = [
"__________________________________________________",
"__________________________________________________",
"__________________________________________________",
"__________________________________________________",
"_____#########_###########_#_#######_#####_#______",
"____#.........#...........#.#.......#.....#.#_____",
"____#.###.#####.#.#######.#.#.#####.#.#.#.#.#_____",
"____#...#.......#.....#.#.#...#...#...#.#.#.#_____",
"_____##.#############.#.#.#####.#.#####.#.#.#_____",
"____#.............#...#.........#.......#.#.#_____",
"____#.#############.###.#################.#.#_____",
"____#...#.....#...#.#.....#...#.............#_____",
"____#.###.###.#.#.#.#####.#.#.#.############______",
"____#.#...#.#...#.#.#...#.#.#.#.#...........#_____",
"____#.#.###.#####.#.#.#.###.#.#.#.#########.#_____",
"____#.#.#.#.....#...#.#.....#.#.#...#.....#.#_____",
"_____##.#.#.#.#####.#.#######.#.###.#.###.#.#_____",
"____#...#...#.......#.#.....#.#.#...#...#...#_____",
"____#.#.####_####.###.#.###.#.###.#####.####______",
"____#.#.#...#...#...#.#.#.#.#...#.....#.#...#_____",
"____#.#.#.#.#.#.###.#.#.#.#.###.#####.#.#.#.#_____",
"____#.#.#.#...#.#...#.#.#.#...#.#...#.#.#.#.#_____",
"____#.###.#####.#####.#.#.###.#.#.#.#.#.#.##______",
"____#.#...#...#...#...#.....#.#.#.#.#.#.#...#_____",
"____#.#.###.#.###.#.#########.#.#.#.#.#.#.#.#_____",
"____#.#...#.#...#.#.....#...#.....#.#.#.#.#.#_____",
"____#.###.###.#.#.#####.###.#######.#.#.###.#_____",
"____#...#.....#.#.....#...#...#...#.#.#.#...#_____",
"____#.#.###.#########.#.#.###.#.#.#.#.#.#.#.#_____",
"____#.#.....#.....#...#.#...#.#.#.#.#.#.#.#.#_____",
"_____####.###.###.#.###.#####.#.###.#.#.#.#.#_____",
"____#...#.#...#.#.#.#...#.....#...#...#.#.#.#_____",
"____#.#.#.#.###.#.#.#.#.#.#######.#####.#.##______",
"____#.#.#.#.#...#...#.#.#...#.........#.#...#_____",
"____#.#.#.#.#.#.###.#.#####.#.#.###.###.###.#_____",
"____#.#.#.#.#.#...#.#.......#.#.#...#...#...#_____",
"____#.#.###.#.###.#.#########.#.#.###.###.#.#_____",
"____#.#...#.#.#...#.......#...#.#...#.....#.#_____",
"____#.###.#.#.###########.#.###.###########.#_____",
"____#.#.....#.........#...#...#.............#_____",
"____#.#########.#####.#.#####.##############______",
"____#.........#.....#.......#.#...#...#.....#_____",
"____#.#######.###############.#.#.#.#.#.###.#_____",
"____#.......#...................#...#...#O..#_____",
"_____#######_###################_###_###_###______",
"__________________________________________________",
"__________________________________________________",
"__________________________________________________",
"__________________________________________________",
"__________________________________________________",
].map(&:chars)

g = Grid.new(grid, SIZE / 2, SIZE / 2, nil)

exit_condition = ->((y, x)) do
  g[y][x] == OXYGEN
end

neighbors = ->((y, x)) do
  g.teleport(y, x)
  g.map_neighbors do
    g.coords if g.cur != WALL
  end
end

dijkstra(g.coords, exit_condition, neighbors)

minutes = 0
loop do
  break if grid.none? { |r| r.include?(GOOD) }

  oxygen_cells = []
  grid.each.with_index do |r, y|
    r.each.with_index do |c, x|
      oxygen_cells << [y, x] if c == OXYGEN
    end
  end

  oxygen_cells.each do |y, x|
    g.teleport(y, x)
    g.map_neighbors do
      g.cur = OXYGEN if g.cur == GOOD
    end
  end
  
  minutes += 1
end

p minutes
